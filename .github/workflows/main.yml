name: CI

on:
  push:
    branches: ["main"]
    tags:
      - "*"
  pull_request:
    branches: ["main"]

env:
  PYTHONFAULTHANDLER: "true"
  MATURIN_VERSION: "1.3.1"

jobs:
  tests:
    name: "${{ matrix.os }}: Python ${{ matrix.python-version }}"
    strategy:
      max-parallel: 2
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set up virtual environment
        run: python -m venv venv

      - name: Activate virtual environment (Unix)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV

      - name: Activate virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          .\venv\Scripts\Activate
          echo "VIRTUAL_ENV=$(pwd)\venv" | Out-String | Set-Content -Path $env:GITHUB_ENV -Encoding utf8

      - name: Install dependencies and build the package
        run: |
          pip install --upgrade pip
          pip install pillow maturin==${{ env.MATURIN_VERSION }} pytest
          python -m maturin build --release
          python -m pip list  # List all installed packages to debug

      - name: Run tests
        run: python -m pytest

  build-and-publish:
    needs: tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set up virtual environment
        run: python -m venv venv
      - name: Activate virtual environment
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install
      - name: Build wheels and sdist
        run: poetry build
      - name: Publish to PyPI
        run: poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
